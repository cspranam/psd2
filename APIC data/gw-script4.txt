var decision = apim.getvariable('decision');
if(decision == "permitWithoutAuth"){
	apim.setvariable('message.body','Transaction completed without Strong Customer Authentication');
} else {
	var urlopen = require('urlopen');
	var userId = apim.getvariable('username');
	var oauthToken = apim.getvariable('oauthtoken');

	var options = {
		target: 'https://mmfa.hopto.org:30443/mga/sps/apiauthsvc?PolicyId=urn:ibm:security:authentication:asf:mmfa_initiate_simple_login&username='+userId,
		method: 'GET',
		headers: {
			'Accept': 'application/json'
		},
		timeout: 60,
		sslClientProfile: 'webapi-sslcli-mgmt'
	};

	urlopen.open(options, function (error, response) {
		if (error) {
			apim.setvariable('message.body', '{"apiauth svc error":' + JSON.stringify(error) + '}');
		} else {
			//apim.setvariable('message.body', '{"response":' + JSON.stringify(response) + '}');
			response.readAsBuffer(function (readError, responseData) {
				if (readError) {
					// Error while reading response or transferring data to Buffer
					apim.setvariable('message.body', '{"apiauth response error":' + readError + '}');
				} else {
					// Green path
					//apim.setvariable('message.body', '{"response":' + responseData + '}');

					var jsonData = JSON.parse(responseData);
					var stateId = jsonData.stateId;
					var deviceId = jsonData.mmfaDevices[0]["mmfa.user.device.id"];
					var cookieString = response.get("set-cookie");
					var cookie = cookieString[0];
					apim.setvariable('message.body', '{"cookie":' + cookie + '}');
					var postData = "{\"operation\":\"verify\",\"mmfa.user.device.id\":\"" + stateId + "\"}";

					var options = {
						target: 'https://mmfa.hopto.org:30443/mga/sps/apiauthsvc?StateId=' + stateId,
						method: 'POST',
						headers: {
							'Accept': 'application/json',
							'Content-Type': 'application/json',
							'Cookie': cookie
						},
						data: postData,
						timeout: 60,
						sslClientProfile: 'webapi-sslcli-mgmt'
					};
					urlopen.open(options, function (error, apiauthsvcResponse) {
						if (error) {
							apim.setvariable('message.body', 'error during parsing transaction id');
						} else {
							apiauthsvcResponse.readAsBuffer(function (readError, responseData) {
								if (readError) {
									apim.setvariable('message.body', '{"response parsing error":' + readError + '}');
								} else {
									jsonData = JSON.parse(responseData);
									var transId = jsonData["mmfa_transaction_id"];
									//apim.setvariable('message.body', transId);
									setTimeout(checkForTransaction, 30000, oauthToken, transId);
								}
							});
						}
					});
				}
			});
		}
	});
}


function checkForTransaction(oauthToken, transId) {
	var scimReqOptions = {
		target: 'https://mmfa.hopto.org:30444/scim/Me?attributes=urn:ietf:params:scim:schemas:extension:isam:1.0:MMFA:Transaction:transactionsPending,urn:ietf:params:scim:schemas:extension:isam:1.0:MMFA:Transaction:transactionsResolved',
		method: 'GET',
		headers: {
			'Accept': 'application/json',
			'Authorization': 'Bearer ' + oauthToken
		},
		timeout: 60,
		sslClientProfile: 'webapi-sslcli-mgmt'
	};
	
	urlopen.open(scimReqOptions, function (error, scimResponse) {
		if (error) {
			apim.setvariable('message.body', 'error accessing scim/me end point');
		} else {
			apim.setvariable('message.body', '{"scim response":' + scimResponse + '}');
			scimResponse.readAsBuffer(function (readError, responseData) {
				if (readError) {
					// Error while reading response or transferring data to Buffer
					apim.setvariable('message.body', '{"scim response error":' + readError + '}');
				} else {
					//apim.setvariable('message.body', '{"scimresponse":' + responseData + '}');
					if (responseData == null) {
						apim.setvariable('message.body', '{"scim response error":' + readError + '}');
					} else {
						var jsonData = JSON.parse(responseData);
						//apim.setvariable('message.body', jsonData);
						var transArray = jsonData["urn:ietf:params:scim:schemas:extension:isam:1.0:MMFA:Transaction"]["transactionsResolved"];
						apim.setvariable('message.body', transArray[0]["transactionId"] + ' ' +transId );
						var transCompleted = false;
						for (var i in transArray) {
							if (transArray[i]["transactionId"] == transId && transArray[i]["txnStatus"] == "SUCCESS") {
								//apim.setvariable('message.body', 'transaction completed : '+transId);
								transCompleted = true;
							} else {
								//apim.setvariable('message.body', 'transaction not completed : '+transId);
							}
						}
						if(transCompleted){
							apim.setvariable('message.body', 'transaction  completed : '+transId);
						}else{
							//apim.setvariable('message.body', 'transaction not completed : '+transId);
							apim.error('ConnectionError', 500, 'Service Error',  'transaction not completed : '+transId);
						}
					}
				}
			});
		}
	});

}