<?php
header("Access-Control-Allow-Origin: *");
/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-L30, 5725-Z22
 *
 * (C) Copyright IBM Corporation 2016
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/

/**
 * Implements hook_help().
 *
 * @param $path
 * @param $arg
 * @return string
 */
function appcreds_sync_help($path, $arg) {
  switch ($path) {
    case 'admin/help#appcreds_sync' :
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t("This module provides ...") . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Something') . '</dt>';
      $output .= '<dd>' . t("Some words about something.") . '</dd>';
      $output .= '</dl>';
      return $output;
  }
}

/**
 * Implementation of hook_ibm_apim_application_create
 *
 * @param $appnode
 * @param $data
 */
function appcreds_sync_ibm_apim_application_create($appnode, $data) {
  watchdog('appcreds_sync_ibm_apim_application_create', 'Hook invoked for %nid.', array(
    '%nid' => $appnode->nid
  ), WATCHDOG_NOTICE);

  // could either send $data which is the result from the API Manager create application portal API call the portal made
  // or $appnode which is the application node in the portal database.
  _appcreds_sync_json_http_request('https://apicisamsync.eu-gb.mybluemix.net/clients/', 'POST', json_encode($data));
}

/**
 * Implementation of hook_ibm_apim_application_update
 *
 * @param $appnode
 * @param $data
 */
function appcreds_sync_ibm_apim_application_update($appnode, $data) {
  watchdog('appcreds_sync_ibm_apim_application_update', 'Hook invoked for %nid.', array(
    '%nid' => $appnode->nid
  ), WATCHDOG_NOTICE);
  // could either send $data which is the result from the API Manager update application portal API call the portal made
  // or $appnode which is the application node in the portal database.
  _appcreds_sync_json_http_request('https://apicisamsync.eu-gb.mybluemix.net/clients/', 'GET', json_encode($data));
}

/**
 * Implementation of hook_ibm_apim_application_delete
 *
 * @param $appnode
 * @param $data
 */
function appcreds_sync_ibm_apim_application_delete($appnode, $data) {
  watchdog('appcreds_sync_ibm_apim_application_delete', 'Hook invoked for %nid.', array(
    '%nid' => $appnode->nid
  ), WATCHDOG_NOTICE);
  // could either send $data which is the result from the API Manager delete application portal API call the portal made
  // or $appnode which is the application node in the portal database.
  _appcreds_sync_json_http_request('https://apicisamsync.eu-gb.mybluemix.net/clients/', 'DELETE', json_encode($data));
}

/**
 * Implementation of hook_ibm_apim_application_creds_create
 *
 * @param $appnode
 * @param $data
 */
function appcreds_sync_ibm_apim_application_creds_create($appnode, $data) {
  watchdog('appcreds_sync_ibm_apim_application_creds_create', 'Hook invoked for %nid.', array(
    '%nid' => $appnode->nid
  ), WATCHDOG_NOTICE);
  // could either send $data which is the result from the API Manager create credentials portal API call the portal made
  // or $appnode which is the application node in the portal database.
  _appcreds_sync_json_http_request('https://apicisamsync.eu-gb.mybluemix.net/clients/', 'POST', json_encode($data));
}

/**
 * Implementation of hook_ibm_apim_application_creds_update
 *
 * @param $appnode
 * @param $data
 */
function appcreds_sync_ibm_apim_application_creds_update($appnode, $data) {
  watchdog('appcreds_sync_ibm_apim_application_creds_update', 'Hook invoked for %nid.', array(
    '%nid' => $appnode->nid
  ), WATCHDOG_NOTICE);
  // could either send $data which is the result from the API Manager update credentials portal API call the portal made
  // or $appnode which is the application node in the portal database.
  _appcreds_sync_json_http_request('https://apicisamsync.eu-gb.mybluemix.net/clients/', 'PUT', json_encode($data));
}

/**
 * Implementation of hook_ibm_apim_application_creds_delete
 *
 * @param $appnode
 * @param $data
 */
function appcreds_sync_ibm_apim_application_creds_delete($appnode, $data) {
  watchdog('appcreds_sync_ibm_apim_application_creds_delete', 'Hook invoked for %nid.', array(
    '%nid' => $appnode->nid
  ), WATCHDOG_NOTICE);
  // could either send $data which is the result from the API Manager delete credentials portal API call the portal made
  // or $appnode which is the application node in the portal database.
  _appcreds_sync_json_http_request('https://apicisamsync.eu-gb.mybluemix.net/clients/', 'DELETE', json_encode($data));
}

/**
 * Implementation of hook_ibm_apim_application_clientid_reset
 *
 * @param $appnode
 * @param $data
 */
function appcreds_sync_ibm_apim_application_clientid_reset($appnode, $data) {
  watchdog('appcreds_sync_ibm_apim_application_clientid_reset', 'Hook invoked for %nid.', array(
    '%nid' => $appnode->nid
  ), WATCHDOG_NOTICE);
  // could either send $data which is the result from the API Manager client id reset portal API call the portal made
  // or $appnode which is the application node in the portal database.
  _appcreds_sync_json_http_request('https://isam904op.com/app/creds/clientid/reset', 'POST', json_encode($data));
}

/**
 * Implementation of hook_ibm_apim_application_clientsecret_reset
 *
 * @param $appnode
 * @param $data
 */
function appcreds_sync_ibm_apim_application_clientsecret_reset($appnode, $data) {
  watchdog('appcreds_sync_ibm_apim_application_clientsecret_reset', 'Hook invoked for %nid.', array(
    '%nid' => $appnode->nid
  ), WATCHDOG_NOTICE);
  // could either send $data which is the result from the API Manager create application portal API call the portal made
  // or $appnode which is the application node in the portal database.
  _appcreds_sync_json_http_request('https://isam904op.com/app/creds/clientsecret/reset', 'POST', json_encode($data));
}

/**
 * Implementation of hook_ibm_apim_application_subscribe
 *
 * @param $appnode
 * @param $data
 */
function appcreds_sync_ibm_apim_application_subscribe($appnode, $data) {
  watchdog('appcreds_sync_ibm_apim_application_subscribe', 'Hook invoked for %nid.', array(
    '%nid' => $appnode->nid
  ), WATCHDOG_NOTICE);
  // Place code here to do something when this hook runs

}

/**
 * Implementation of hook_ibm_apim_application_unsubscribe
 *
 * @param $appnode
 * @param $data
 */
function appcreds_sync_ibm_apim_application_unsubscribe($appnode, $data) {
  watchdog('appcreds_sync_ibm_apim_application_unsubscribe', 'Hook invoked for %nid.', array(
    '%nid' => $appnode->nid
  ), WATCHDOG_NOTICE);
  // Place code here to do something when this hook runs
}

/**
 * @param $url
 * @param string $verb
 * @param null $data
 * @return \stdClass
 * @throws \Exception
 */
function _appcreds_sync_json_http_request($url, $verb, $data = NULL) {
    watchdog('_appcreds_sync_json_http_request', 'Calling ISAM end point');
	watchdog('_appcreds_sync_json_http_request data passed', $data);
	// $options = array(
	  // 'method' => $verb,
	  // 'timeout' => 15,
	  // 'data' => $data,
	  // 'headers' => array('Content-Type' => 'application/json'),
	// );

	// $result = drupal_http_request('https://apicisamsync.eu-gb.mybluemix.net/clients', $options);
	
	// watchdog('ISAM RESPONSE CODE', $result->code);	
	// watchdog('ISAM RESPONSE DATA', $result->data);
	
	// return $result;	
	 $result = curlInvoke('https://apicisamsync.eu-gb.mybluemix.net/clients', $verb , array('Content-Type: application/json'), $data , TRUE, TRUE, TRUE,  FALSE);


	/*// Here we will get these values from the remote server
	$clientId = json_decode($result)['clientId'];
	$clientSecret = json_decode($result)['clientSecret'];
	// $description = '';

	// Here we update the portal's records of the client credentials
	$data['clientID'] = $clientId;
	$data['clientSecret'] = $clientSecret;

	// Here we update the APIM recored of the client credentials
	$postData = array(
	 'clientID' => $clientId,
	 'clientSecret' => base64_encode(hash('sha256', $clientSecret, true))
	);
	$credentialUrl = $data['url'];
	$response = ibm_apim_put($credentialUrl, json_encode($postData));
	drupal_set_message('Updated the client credentials - new client id:'.$clientId);*/

	watchdog('_appcreds_sync_json_http_request ISAM RESPONSE CODE', $result);
	watchdog('_appcreds_sync_json_http_request ISAM RESPONSE DATA', $result->data);

	return $result;
}


function curlInvoke($url, $verb = 'GET', $headers = NULL, $data = NULL, $return_result = FALSE, $raw_api_call = FALSE, $insecure = NULL,  $notify_drupal = TRUE) {


  // Use curl instead of drupal_http_request so that we can
  // check the server certificates are genuine so that we
  // do not fall foul of a man-in-the-middle attack.
  $resource = curl_init();

  watchdog('curlInvoke URL ', $url);
  watchdog('curlInvoke DATA ', $data);
  watchdog('curlInvoke HEADERS ', $headers);

  curl_setopt($resource, CURLOPT_URL, $url);
  if (!is_null($headers)) {
    curl_setopt($resource, CURLOPT_HTTPHEADER, $headers);
  }
  curl_setopt($resource, CURLOPT_RETURNTRANSFER, 1);

  // Return the response header as part of the response
  curl_setopt($resource, CURLOPT_HEADER, 1);

  if ($verb != 'GET') {
    curl_setopt($resource, CURLOPT_CUSTOMREQUEST, $verb);
  }

  if ($verb == 'PUT' || $verb == 'POST') {
    curl_setopt($resource, CURLOPT_POSTFIELDS, $data);
  }
  if ($verb == 'HEAD') {
    curl_setopt($resource, CURLOPT_NOBODY, TRUE);
    curl_setopt($resource, CURLOPT_HTTP_VERSION, CURL_HTTP_VERSION_1_1);
  }

  if ($insecure) {
    curl_setopt($resource, CURLOPT_SSL_VERIFYPEER, FALSE);
    curl_setopt($resource, CURLOPT_SSL_VERIFYHOST, 0);
  }
  else {
    curl_setopt($resource, CURLOPT_SSL_VERIFYPEER, TRUE);
    curl_setopt($resource, CURLOPT_SSL_VERIFYHOST, 2);

  }

  if (isset($raw_api_call)) {
    $response = curl_exec($resource);
  }
  else {
    $response = utf8_decode(curl_exec($resource));
  }
  $http_status = curl_getinfo($resource, CURLINFO_HTTP_CODE);
  $error = curl_error($resource);

  // Construct the result object we expect
  $result = new stdClass();

  // Assign the response headers
  $header_size = curl_getinfo($resource, CURLINFO_HEADER_SIZE);
  $header_txt = mb_substr($response, 0, $header_size);
  $result->headers = array();

  foreach (explode("\r\n", $header_txt) as $line) {
    $parts = explode(': ', $line);
    if (count($parts) == 2) {
      $result->headers[$parts[0]] = $parts[1];
    }
  }


  $result->code = $http_status;
  watchdog('curlInvoke ISAM RESPONSE CODE', $result);
  watchdog('curlInvoke ISAM RESPONSE DATA', $result->data);

  curl_close($resource);


  return $result;
}
